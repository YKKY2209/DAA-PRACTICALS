DAA-Practicals
==============================Practical-1============================================
1d-array
Q1 sum of elements
code:
def _sum(arr):
    sum=0
    for i in arr:
        sum=sum+i
    return(sum)
arr=[ ]
arr=[25,32,16,65]
n=len(arr)
ans=_sum(arr)
print('sum of the array is',ans)
print('length of an array',n)

Q2 searching of elements
code:
from array import *
arr=array('i',[ ])
n=int(input('enter a length of an array: '))
for i in range(n):
    x=int(input('enter elements:'))
    arr.append(x)
print(arr)
val=int(input('enter the value to be searched:'))
k=0
for e in arr:
    if e==val:
        print(k)
        break
    k=k+1
Q3 maximum and Minimum
code:
arr=[12,1234,45,65,9]
maximum=arr[0]
for i in range(len(arr)):
    if arr[i]>maximum:
        maximum=arr[i]
print(maximum)
minimum=arr[0]
for i in range(len(arr)):
    if arr[i]<minimum:
        minimum=arr[i]
print(minimum)
    
Q4 counting of Even Odd
Code:
def counting_eveodd(arr,arr_size):
    eve_count=0
    odd_count=0
    for i in range(arr_size):
        if(arr[i]&1==1):
            odd_count+=1
        else:
            eve_count+=1
    print("Number of even elements: ",eve_count)
    print("Number of odd elements: ",odd_count)
arr=[12,65,95,36,15,68,25,6,65,95]
n=len(arr)
counting_eveodd(arr,n)

2d-array
Q1 
Code:
# sum of rows and columns
a=[
    [1,2,3],
    [4,5,6],
    [7,8,9]
  ];
rows=len(a);
cols=len(a[0]);
for i in range(0,rows):
    sumrow=0
    for j in range(0,cols):
        sumrow=sumrow+a[i][j];
    print("Sum of"+str(i+1)+"Row: ",str(sumrow));
for i in range(0,rows):
    sumcol=0
    for j in range(0,cols):
        sumcol=sumcol+a[j][i];
    print("Sum of"+str(i+1)+"Columns: "+str(sumcol));

Q2 diagonal elements addition
COde:
a=[[12,56,38,49],[15,47,32,72],[52,43,27,18],[89,15,96,25]]
sum=0
pri_diag=0
n=4
for i in range(len(a)):
    for j in range(len(a[i])):
        if i==j:
            pri_diag=pri_diag+a[i][j]
        if i+j==(n-1):
            sum=sum+a[i][j]
print(pri_diag)
print(sum)

Q3 Addition Of 2 matrices using nested loop
Code:
x=[[1,2,3],[4,5,6],[7,8,9]]
y=[[9,8,7],[6,5,4],[3,2,1]]
r=[[0,0,0],[0,0,0],[0,0,0]]
for i in range(len(x)):
    for j in range(0,3):
        r[i][j]=x[i][j]+y[i][j]
print(r)

===============================Practical-3=======================================
Q1 Linear search
def linear_search(arr, x):
    # Traverse through all elements in the list
    for i in range(len(arr)):
        # If the element is found, return its index
        if arr[i] == x:
            return i
    return -1
my_list = [10, 5, 8, 20, 2,25,26,27,800,400,800,556]
target_element = 800
result = linear_search(my_list, target_element)
if result == -1:
    print("Element is not present in the list")
else:
    print("Element is present at index", result)
Q2
def binary_search(arr, x):
    # initialize variables
    left = 0
    right = len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == x:
            return mid
        elif arr[mid] < x:
            left = mid + 1
        else:
            right = mid - 1
    return -1
arr = [2, 5, 7, 12, 16, 18, 21, 23, 26, 30]
x = 1
result = binary_search(arr, x)
if result != -1:
    print("Element is present at index", str(result))
else:
    print("Element is not present in array")
=======================================Practical-4=============================
Q1
#Bubble sort
arr = [4,3,9,5,8,2,6,1,7]
n = len(arr)
for i in range(n):
    for j in range(0, n-i-1):
        if arr[j] > arr[j+1]:
            arr[j], arr[j+1] = arr[j+1], arr[j]

print("Sorted array:", arr)
Q2
#selection sort
x=[6,4,8,2,5,7,3,9,1]
for i in range(len(x)-1):
	for j in range(i+1,len(x)):
		if x[i]>x[j]:
			c=x[i]
			x[i]=x[j]
			x[j]=c
print(x)
Q3
#insertion Sort
x=[5,4,2,9,1,8]
for i in range(len(x)):
	c=i
	while c>0 and x[c]<x[c-1]:
		a=x[c]
		x[c]=x[c-1]
		x[c-1]=a
		c=c-1
print(x)
===============================Practical-5===============================================
Q1
#factorial of number
def factorial(n):
    if n==0 or n==1:
        return 1
    elif n<0:
        return"Invalid input"
    else:
        return(n*factorial(n-1))
num=int(input("Enter integer: "))
res=factorial(num)
print("Factorial of",num,"=",res)
Q2
# Prompt the user to enter the number of terms
nterms = int(input("How many terms do you want to generate in the Fibonacci sequence? "))

# First two terms
n1, n2 = 0, 1
count = 0

# Check if the number of terms is valid
if nterms <= 0:
   print("Please enter a positive integer")
elif nterms == 1:
   print("Fibonacci sequence up to", nterms, ":")
   print(n1)
else:
   print("Fibonacci sequence:")
   while count < nterms:
       print(n1)
       nth = n1 + n2
       # Update values
       n1 = n2
       n2 = nth
       count += 1
Q3
def tower_of_hanoi(n, from_rod, to_rod, aux_rod):
    if n == 1:
        print("Move disk 1 from rod", from_rod, "to rod", to_rod)
        return
    tower_of_hanoi(n-1, from_rod, aux_rod, to_rod)
    print("Move disk", n, "from rod", from_rod, "to rod", to_rod)
    tower_of_hanoi(n-1, aux_rod, to_rod, from_rod)
    
n = int(input("Enter the number of disks: "))
tower_of_hanoi(n, 'A', 'C', 'B')
============================Practical-6==============================================
Q1
def match(string,sub):
    l=len(string)
    ls=len(sub)
    start=sub[0]
    for k in range(l-ls+1):
        if start==string[k]:
            i,j=1,k+1
            while i<ls:
                if sub[i]==string[j]:
                    i+=1
                    j+=1
                else:
                    break
        else:
            print("Found at index",k)
match("AABAACAADAABAABA","AABA")

Q2
def getMin(arr,n):
    res=arr[0]
    for i in range(1,n):
        res=min(res,arr[i])
    return res
def getMax(arr,n):
    res=arr[0]
    for i in range(1,n):
        res=max(res,arr[i])
    return res
arr=[14,67,89,3,86,33,45,73,65,78,76]
n=len(arr)
print("Maximum element of the array is ",getMax(arr,n))
print("Minimum element of the array is ",getMin(arr,n))
========================================Practical-7====================================
Questions
def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]
        
        merge_sort(left_half)
        merge_sort(right_half)
        
        i = j = k = 0
        
        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1
        
        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1
            
        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1
            
    return arr
unsorted_list = [5, 2, 8, 1, 6]
sorted_list = merge_sort(unsorted_list)
print(sorted_list)
==============================================Practical-9================================
Q1
def file_merging(files):
    files.sort(key=lambda x:x[1])
    total_time=0
    for file in files:
        total_time+=file[1]
    return total_time
files=[(1,5),(2,8),(3,7),(4,6),(5,9)]
print("Total time for merging files: ",file_merging(files))

Q2
#coin change
def coin_change(denominations,value):
    denominations.sort(reverse=True)
    total_coins=0
    for coin in denominations:
        while coin<=value:
            value-=coin
            total_coins+=1
        return total_coins
denominations=[1,2,5,10,20,50,100]
value=70
print("Minimum number of coins required: ",coin_change(denominations,value))